configfile: "input.yaml"

from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider
HTTP = HTTPRemoteProvider() #for blast

import re
import itertools
from pathlib import Path
pat = r"^(.*)_R?[12]\.fastq|fq$"
f, *_ = config["sequence_files_R1"]
sample_name_a, *_ = re.findall(pat, Path(f).name)
for sequence_fp in itertools.chain(config["sequence_files_R1"], config["sequence_files_R2"]):
    sample_name_b, *_ = re.findall(pat, Path(sequence_fp).name)
    assert sample_name_a == sample_name_b, \
        "Expected sample name, {}, not consistent for all sequence files!".format(sample_name_a)
sample_name = sample_name_a

rule all:
    input:
        f"data/processed/{sample_name}_orf.fasta",
        f"data/processed/{sample_name}_blast_results.tsv"

subworkflow filter_out_nonhost:
    snakefile: "rules/1_filter_out_nonhost.smk"
    configfile: "input.yaml"

rule contig_assembly:
    input:
        filter_out_nonhost(f"../data/interim/{sample_name}_nonhost_R1.fastq"),
        filter_out_nonhost(f"../data/interim/{sample_name}_nonhost_R2.fastq")
    output:
        "data/interim/{sample}_nonhost_contigs.fasta"
    params:
        workdir="data/interim/{sample}_spades_workdir"
    conda:
        "envs/spades.yaml"
    shell:
        "spades.py --rna "
        "  --pe1-1 {input[0]} "
        "  --pe1-2 {input[1]} "
        "  -o {params.workdir} "
        "&& mv {params.workdir}/soft_filtered_transcripts.fasta {output} "
        ";  rm -rf {params.workdir}"

rule make_known_virus_blastdb:
    # adapted from https://github.com/EnvGen/snakemake-workflows/blob/master/bio/ngs/rules/quality_control/internal_standards.rules
    input:
        HTTP.remote("https://ftp.ncbi.nlm.nih.gov/refseq/release/viral/viral.1.1.genomic.fna.gz"),
        # described here https://ftp.ncbi.nlm.nih.gov/refseq/release/README
    params:
        db_prefix="data/blast/virus_blastdb",  # used in downstream rule, should be a global?
        virus_fasta="data/blast/all_known_viruses.fasta"
    output:
        expand("data/blast/virus_blastdb.{ext}", ext= ["nhr", "nin", "nog", "nsd", "nsi", "nsq" ])
    shell:
        "gzip -d -c {input} >| {params.virus_fasta} "
        "&& makeblastdb -dbtype nucl "
        "-parse_seqids "
        "-input_type fasta "
        "-in {params.virus_fasta} "
        "-out {params.db_prefix} "

rule blast_against_known_viruses:
# should have make_known_viruse_blastdb as dependency
    input:
        contigs="data/interim/{sample}_nonhost_contigs.fasta"
    output:
        "data/processed/{sample}_blast_results.tsv"
    params:
        db_name="data/blast/virus_blastdb" # createde upstream, should be global?
    conda:
        "envs/blastn.yaml"
    shell:
        "blastn -db {params.db_name} "
        "-outfmt 6 "
        "-query {input.contigs} "
        "-out {output}"

rule pORF_finding:
    input:
        "data/interim/{sample}_nonhost_contigs.fasta"
    output:
        "data/processed/{sample}_orf.fasta"
    conda:
        "envs/orfipy.yaml"
    shell:
        "orfipy {input} --rna {output} --min 10 --max 10000 --table 1 --outdir data/output/"

