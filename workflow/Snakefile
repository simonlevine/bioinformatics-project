configfile: "input.yaml"

include: "rules/0_download_rnaseq_data.smk"
include: "rules/1_download_genome.smk"

rule all:
    input: "data/processed/{}_orf.fasta".format(config["sample"])


import re
from typing import Literal
from pathlib import Path
def input_file_validation(sample, paired_end: Literal["1", "2"]):
    """given a sample name specified at the top-level, i.e., at the
    command line, determine the corresponding read files. If the
    file is not found in `data/raw/reads`, assume that this is a
    SRA accession number and download"""
    data_dir = Path("data/raw/reads")
    pat = r"^" + sample + r"_?R" + paired_end + r"_?\.(fastq|fq)(\.gz)?"
    fqs = [fq for fq in data_dir.glob("*") if re.match(pat, fq.name)]
    try:
        fq, = fqs
    except ValueError:
        print(f"Could not find paired end file R{paired_end} for sample {sample}. "
              f"Assuming this is a SRA accesion number...")
        return str(data_dir/f"{sample}_{paired_end}.fastq")
    return str(fq)

rule star_double_ended:
    input:
        rules.download_genome.output["completion_flag"],
        reference_genome_dir=rules.download_genome.output[0],
        fq1 = lambda wildcards: input_file_validation(wildcards.sample, "1"),
        fq2 = lambda wildcards: input_file_validation(wildcards.sample, "2")
    output:
        "data/interim/{sample}_nonhost_R1.fastq",
        "data/interim/{sample}_nonhost_R2.fastq"
    conda:
        "envs/star.yaml"
    threads: 12
    script:
        "scripts/star_de.py"

rule contig_assembly:
    input: 
        "data/interim/{sample}_nonhost_R1.fastq",
        "data/interim/{sample}_nonhost_R2.fastq"
    output:
        "data/interim/{sample}_nonhost_contigs.fasta"
    params:
        workdir="data/interim/{sample}_spades_workdir"
    conda:
        "envs/spades.yaml"
    shell:
        "spades.py --rna "
        "  --pe1-1 {input[0]} "
        "  --pe1-2 {input[1]} "
        "  -o {params.workdir} "
        "&& mv {params.workdir}/soft_filtered_transcripts.fasta {output} "
        ";  rm -rf {params.workdir}"

rule pORF_finding:
    input: 
        "data/interim/{sample}_nonhost_contigs.fasta"
    output:
        "data/processed/{sample}_orf.fasta"
    conda:
        "envs/orfipy.yaml"
    shell:
        "orfipy {input} --rna {output} --min 10 --max 10000 --table 1 --outdir data/output/"
