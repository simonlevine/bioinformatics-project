rule all:
    input: "data/interim/demo_nonhost_contigs.fasta"

rule get_sample_data: #The reads are paired-end 101-mers generated on an Illumina HiSeq instrument
    output:
        "data/reads/demo_R1.fq"
        "data/reads/demo_R2.fq"

    shell:
        " cd ./data/reads "
        " && wget http://genomedata.org/rnaseq-tutorial/HBR_UHR_ERCC_ds_5pc.tar "
        " && tar -xvf HBR_UHR_ERCC_ds_5pc.tar "
        " && gunzip UHR_Rep1_ERCC-Mix1_Build37-ErccTranscripts-chr22.read1.fastq.gz "
        " && gunzip UHR_Rep1_ERCC-Mix1_Build37-ErccTranscripts-chr22.read2.fastq.gz "
        " && rm -rf ./*.gz "
        " && rm -rf ./http://genomedata.org/rnaseq-tutorial/HBR_UHR_ERCC_ds_5pc.tar "
        " && mv UHR_Rep1_ERCC-Mix1_Build37-ErccTranscripts-chr22.read1.fastq demo_R1.fq "
        " && mv UHR_Rep1_ERCC-Mix1_Build37-ErccTranscripts-chr22.read2.fastq demo_R2.fq "
        " && cd .. "

subworkflow filter_out_nonhost:
    snakefile: "rules/1_filer_out_nonhost.smk"

rule contig_assembly:
    input: 
        filter_out_nonhost("../data/interim/{sample}_nonhost.fq")
    output:
        "data/interim/{sample}_nonhost_contigs.fasta"
    params:
        workdir="data/interim/{sample}_spades_workdir"
    conda:
        "envs/spades.yaml"
    shell:
        "spades.py --rna --s1 {input} -o {params.workdir} "
        "&& mv {params.workdir}/soft_filtered_transcripts.fasta {output} "
        "&& rm -rf {params.workdir}"
